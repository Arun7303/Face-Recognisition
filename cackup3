import tkinter as tk
from PIL import Image, ImageTk
import cv2
import mysql.connector

class face_recognition:
    def __init__(self, root):
        self.root = root
        self.root.title("Face Recognition")
        self.root.geometry("1530x1080+0+0")

        img = Image.open("images/bg01.jpg")
        img = img.resize((1830, 780), Image.LANCZOS)
        self.photoimage = ImageTk.PhotoImage(img)

        fir_label = tk.Label(self.root, image=self.photoimage)
        fir_label.place(x=0, y=0, width=1830, height=880)

        title_label = tk.Label(self.root, text="FACE RECOGNITION SYSTEM", font=(
            "Arial", 35, "bold"), bg="black", fg="white")
        title_label.place(x=0, y=0, width=1600, height=50)

        b3 = tk.Button(self.root, text="Scan", command=self.face_recog,
                       highlightbackground="black", highlightthickness=10, cursor="hand2")
        b3.place(x=420, y=280, height=200, width=220)

    def face_recog(self):
        def draw_boundary(img, classifier, scaleFactor, minNeighbors, color, text, clf):
            gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            features = classifier.detectMultiScale(gray_image, scaleFactor, minNeighbors)

            coord = []

            for (x, y, w, h) in features:
                cv2.rectangle(img, (x, y), (x + w, y + h), color, 3)
                id, predict = clf.predict(gray_image[y:y + h, x:x + w])
                confidence = int((100 * (1 - predict / 300)))

                conn = mysql.connector.connect(
                    host="localhost",
                    user="root",
                    password="admin",
                    database="face_recognition",
                )
                my_cursor = conn.cursor()

                my_cursor.execute("SELECT Name FROM student WHERE ID=" + str(id))
                n = my_cursor.fetchone()
                if n is not None:
                    n = str(n)
                else:
                    n = "Unknown"

                my_cursor.execute("SELECT Roll_No FROM student WHERE ID=" + str(id))
                r = my_cursor.fetchone()
                if r is not None:
                    r = str(r)
                else:
                    r = "Unknown"

                my_cursor.execute("SELECT Department FROM student WHERE ID=" + str(id))
                d = my_cursor.fetchone()
                if d is not None:
                    d = str(d)
                else:
                    d = "Unknown"


                if confidence > 77:
                    cv2.putText(img, f"Roll NO: {r}", (x, y - 55), cv2.FONT_HERSHEY_COMPLEX, 0.8, (255, 255, 255), 3)
                    cv2.putText(img, f"Name: {n}", (x, y - 30), cv2.FONT_HERSHEY_COMPLEX, 0.8, (255, 255, 255), 3)
                    cv2.putText(img, f"Department: {d}", (x, y - 5), cv2.FONT_HERSHEY_COMPLEX, 0.8, (255, 255, 255), 3)

                else:
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 3)
                    cv2.putText(img, "UNKNOWN FACE", (x, y - 5), cv2.FONT_HERSHEY_COMPLEX, 0.8, (255, 255, 255), 3)

                coord = [w, y, x, h]
            return coord

        def recognize(img, clf, faceCascade):
            coord = draw_boundary(img, faceCascade, 1.1, 10, (0, 255, 0), "Face", clf)
            return img

        faceCascade = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
        clf = cv2.face_LBPHFaceRecognizer.create()
        clf.read("classifier.xml")

        video_cap = cv2.VideoCapture(0)

        is_running = True  # Add a flag to control the loop

        while is_running:  # Use the flag to control the loop
            ret, img = video_cap.read()
            img = recognize(img, clf, faceCascade)
            cv2.imshow("Welcome To Recognition", img)

            key = cv2.waitKey(1)
            if key == 13:
                is_running=False  # Check if Enter key is pressed
                break  # Set the flag to False to exit the loop

        video_cap.release()
        cv2.destroyAllWindows()
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    obj = face_recognition(root)
    root.mainloop()
    root.destroy()
